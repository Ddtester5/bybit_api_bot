import { checkOpenPositions } from "../modules/check_open_position";
import { getLastMarketPrice } from "../modules/get_last_market_price";
import { client } from "../api/bybit_api_client_v5";
import {
  candleCountAnalize,
  leverage,
  orderLimit,
  pullbackThreshold,
  riskPercentage,
  stopLossRatio,
  takeProfitRatio,
  timeFrame,
} from "../config";
import { OHLCVKlineV5 } from "bybit-api";
import { getAvalibleBalance } from "../modules/get_avalible_ballance";
import { setLeverage } from "../modules/set_leverage";
import { checkOpenPositionsCount } from "../modules/check_open_positions_count";
import { getPriceChange } from "../modules/get_price_change";
import moment from "moment";
import { getRoundedBalance } from "../modules/get_rounded_balance";
import { getFoundingRate } from "../modules/get_founding_rate";

export const RollbackShortStrategy = async (tradingPair: string) => {
  try {
    const founding_rate = await getFoundingRate(tradingPair);
    if (Number(founding_rate) < -0.0001) {
      console.log("–°—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å—Ç–æ–π", founding_rate);
      return;
    }
    const positionsCount = await checkOpenPositionsCount();
    if (positionsCount > orderLimit) {
      return;
    }
    if (!tradingPair.includes("USDT")) {
      return;
    }
    const hasOpenPosition = await checkOpenPositions(tradingPair);

    if (hasOpenPosition) {
      console.log(
        `–ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ ${tradingPair}`,
      );
      return;
    }
    const lastPrice = await getLastMarketPrice(tradingPair);
    console.log(`–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–∞—Ä—ã ${tradingPair}`, "=", lastPrice);
    const priceDayAgo = await getPriceChange(
      tradingPair,
      moment().subtract(1, "day").valueOf(),
    );
    console.log("1 day change", priceDayAgo);
    const price3dayAgo = await getPriceChange(
      tradingPair,
      moment().subtract(3, "days").valueOf(),
    );
    console.log("3 day change", price3dayAgo);
    if (
      !priceDayAgo ||
      !price3dayAgo ||
      priceDayAgo > 10 ||
      priceDayAgo < -5 ||
      price3dayAgo > 50
    ) {
      return;
    }
    const priceMonthAgo = await getPriceChange(
      tradingPair,
      moment().subtract(1, "month").valueOf(),
    );
    console.log("1 month change", priceMonthAgo);
    if (!priceMonthAgo || priceMonthAgo > 0) {
      return;
    }
    const candles = await client.getKline({
      category: "linear",
      symbol: tradingPair,
      interval: `${timeFrame}`,
      limit: candleCountAnalize,
    });

    const highPrices = candles.result.list.map((candle: OHLCVKlineV5) =>
      parseFloat(candle[2]),
    );
    const lowPrices = candles.result.list.map((candle: OHLCVKlineV5) =>
      parseFloat(candle[3]),
    );
    const closePrices = candles.result.list
      .map(
        (candle: OHLCVKlineV5) => parseFloat(candle[4]), // –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
      )
      .reverse();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è)
    let isPriceIncreasing = true;
    for (let i = 1; i < closePrices.length; i++) {
      if (closePrices[i] <= closePrices[i - 1]) {
        isPriceIncreasing = false;
        break;
      }
    }

    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —Ä–∞—Å—Ç–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (!isPriceIncreasing) {
      console.log("–û—Ç–∫–∞—Ç–∞ –Ω–µ—Ç");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É –æ—Ç–∫–∞—Ç–∞
    const maxPrice = Math.max(...highPrices);
    const minPrice = Math.min(...lowPrices);
    if ((maxPrice - minPrice) / maxPrice < pullbackThreshold) {
      console.log("–û—Ç–∫–∞—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.");
      return;
    }
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–±–∞–ª–∞–Ω—Å)

    const availableBalance = await getAvalibleBalance();
    if (!availableBalance || isNaN(availableBalance) || availableBalance <= 0) {
      console.error("–û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 0.");
      return;
    }
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (5% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤)
    const positionSizeInUSD =
      getRoundedBalance(availableBalance) * riskPercentage * leverage;
    const positionSize = Math.floor(positionSizeInUSD / lastPrice);
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—é
    const stopLossPrice = lastPrice * (1 + stopLossRatio);
    const takeProfitPrice = lastPrice * (1 - takeProfitRatio);
    await setLeverage(tradingPair, leverage);

    console.log(`üìä –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –æ—Ä–¥–µ—Ä–∞:
      üîπ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${availableBalance}
      üîπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–≤ USD): ${positionSizeInUSD}
      üîπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã): ${positionSize}
      üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${lastPrice}
      üîπ –°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLossPrice}
      üîπ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${takeProfitPrice}
      üîπ –ü–ª–µ—á–µ: ${leverage}
      üîπ –û—Ç–∫–∞—Ç: ${(maxPrice - minPrice) / maxPrice}
    `);

    const orderResponse = await client.submitOrder({
      category: "linear",
      symbol: tradingPair,
      side: "Sell",
      orderType: "Market",
      qty: `${positionSize}`,
      timeInForce: "GTC",
      stopLoss: stopLossPrice.toFixed(6),
      takeProfit: takeProfitPrice.toFixed(6),
    });

    console.log("–®–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞:", orderResponse);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", error);
  }
};
